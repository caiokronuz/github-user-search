{"version":3,"sources":["components/header/index.js","pages/main/index.js","services/api.js","pages/user/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Main","redirect","name","document","getElementById","value","window","location","assign","className","type","placeholder","onClick","this","Component","api","axios","create","baseURL","User","state","datas","props","match","params","get","response","setState","data","alert","replace","src","avatar_url","alt","login","bio","href","Routes","exact","path","component","App","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSASeA,G,MANA,kBACX,4BAAQC,GAAG,eAAX,wB,eCDiBC,G,kNACjBC,SAAW,WACP,IAAMC,EAAOC,SAASC,eAAe,YAAYC,MACjDC,OAAOC,SAASC,OAAhB,8DAA8EN,K,uDAI9E,OACI,yBAAKO,UAAU,UACP,2BAAOC,KAAK,OAAOX,GAAG,WAAWY,YAAY,uBAC7C,4BAAQC,QAASC,KAAKZ,UAAtB,iB,GAVca,c,iCCCnBC,E,OAFHC,EAAMC,OAAO,CAACC,QAAS,iCCEdC,G,kNACjBC,MAAQ,CACJC,MAAO,I,oMAIItB,EAAMc,KAAKS,MAAMC,MAAMC,OAAvBzB,G,SACgBgB,EAAIU,IAAJ,WAAY1B,I,OAA7B2B,E,OACNb,KAAKc,SAAS,CAACN,MAAOK,EAASE,O,gDAE/BC,MAAM,iCACNvB,OAAOC,SAASuB,QAAhB,mD,8IAIC,IACET,EAASR,KAAKO,MAAdC,MACP,OACI,yBAAKZ,UAAU,gBACX,yBAAKsB,IAAKV,EAAMW,WAAYC,IAAI,WAChC,4BAAKZ,EAAMa,OACX,4BAAKb,EAAMnB,MACX,2BAAImB,EAAMc,KACV,uBAAGC,KAAI,6BAAwBf,EAAMa,MAA9B,sBAAP,+B,GAvBkBpB,cCYnBuB,EATA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAWxC,IACnC,kBAAC,IAAD,CAAOuC,KAAK,YAAYC,UAAWrB,OCN1BsB,G,6KAEjB,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALyBK,cCOb4B,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASpB,MACvB,2DCbNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASC,eAAe,SD0HpB,kBAAmB2C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf0a6433.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Header = () => (\n    <header id='main-header'>\n        Github User Search\n    </header>\n)\n\nexport default Header;","import React, {Component} from 'react';\nimport './style.css';\n\nexport default class Main extends Component{\n    redirect = () => {\n        const name = document.getElementById('txt-name').value;\n        window.location.assign(`http://caiokronuz.github.io/github-user-search/user/${name}`)           \n    }\n\n    render(){\n        return(\n            <div className='input '>\n                    <input type=\"text\" id=\"txt-name\" placeholder=\"Nome de usuário\"></input>\n                    <button onClick={this.redirect}>Procurar</button>\n            </div>\n        )\n    }\n}","import axios from 'axios';\n\nconst api = axios.create({baseURL: 'https://api.github.com/users'});\n\nexport default api;","import React, {Component} from 'react';\nimport api from \"../../services/api\";\nimport './style.css'\n\nexport default class User extends Component{\n    state = {\n        datas: [],\n    }\n    async componentDidMount(){\n        try{\n            const {id} = this.props.match.params;\n            const response = await api.get(`/${id}`)\n            this.setState({datas: response.data});  \n        }catch(error){\n            alert('Usuário não encontrado.')\n            window.location.replace(`http://caiokronuz.github.io/github-user-search/`)\n        }\n        \n    }\n    render(){\n        const {datas} = this.state;\n        return(\n            <div className=\"informations\">\n                <img src={datas.avatar_url} alt=\"avatar\"></img>\n                <h1>{datas.login}</h1>\n                <h2>{datas.name}</h2>\n                <p>{datas.bio}</p>\n                <a href={`https://github.com/${datas.login}?tab=repositories`}>Acessar repositório</a>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\n\nimport Main from './pages/main';\nimport User from './pages/user'\n\nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path = '/' component={Main} />\n            <Route path=\"/user/:id\" component={User} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default Routes;","import React, {Component} from 'react';\nimport Header from './components/header'\nimport Routes from './routes'\nimport './style.css';\n\nexport default class App extends Component{\n  render(){\n    return(\n      <div className=\"App\">\n        <Header />\n        <Routes />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}